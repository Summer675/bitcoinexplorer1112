<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.msy.block1112.dao.BlockMapper">
  <resultMap id="blockmap" type="com.msy.block1112.po.Block">
    <id column="blockid" jdbcType="INTEGER" property="blockid" />
    <result column="blockhash" jdbcType="CHAR" property="blockhash" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="time" jdbcType="BIGINT" property="time" />
    <result column="mined" jdbcType="VARCHAR" property="mined" />
    <result column="sizeOndisk" jdbcType="INTEGER" property="sizeOndisk" />
    <result column="confirmations" jdbcType="INTEGER" property="confirmations" />
    <result column="txSize" jdbcType="INTEGER" property="txSize" />
    <result column="difficulty" jdbcType="DOUBLE" property="difficulty" />
    <result column="markle_root" jdbcType="CHAR" property="markle_root" />
    <result column="bits" jdbcType="INTEGER" property="bits" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="weight" jdbcType="INTEGER" property="weight" />
    <result column="blockreword" jdbcType="DOUBLE" property="blockreword" />
    <result column="feereword" jdbcType="DOUBLE" property="feereword" />
    <result column="transactionVolume" jdbcType="DOUBLE" property="transactionVolume" />
    <result column="nonce" jdbcType="VARCHAR" property="nonce" />
  </resultMap>
  <sql id="blocksql">
    height, blockid, blockhash, mined, size, time, confirmations, difficulty,
    bits, weight, markle_root, nonce,version,txSize,sizeOndisk,feereword,blockreword,transactionVolume
  </sql>
     <select id="getblockDetailByHash" resultMap="blockmap">
        select
        <include refid="blocksql" />
        from block
        where blockhash = #{blockhash}
    </select>


  <select id="getblockDetailByHeight" resultMap="blockmap">
    select
    <include refid="blocksql" />
    from block
    where height = #{height}
  </select>

  <select id="list"  resultMap="blockmap">
  select
  <include refid="blocksql" />
  from block

</select>
  <select id="getpage"  resultMap="blockmap">
    select
    <include refid="blocksql" />
    from block
    order by time desc
  </select>
  <select id="select"  resultMap="blockmap">
    select
    <include refid="blocksql" />
    from block
    order by time desc limit 10
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from block
    where blockhash = #{blockhash,jdbcType=CHAR}
  </delete>


  <insert id="insert" parameterType="com.msy.block1112.po.Block">
    insert into block (blockhash, blockid, height,
      time, txSize, sizeOndisk,
      difficulty,mined,confirmations,bits,weight,markle_root,nonce,version,feereword,blockreword,
                       transactionVolume

      )
    values (#{blockhash,jdbcType=CHAR}, #{blockid,jdbcType=INTEGER}, #{height,jdbcType=INTEGER},
      #{time,jdbcType=TIMESTAMP}, #{txSize,jdbcType=INTEGER}, #{sizeOndisk,jdbcType=BIGINT},
      #{difficulty,jdbcType=DOUBLE}, #{mined,jdbcType=VARCHAR},#{confirmations,jdbcType=INTEGER},
       #{bits,jdbcType=INTEGER},#{weight,jdbcType=INTEGER},#{markle_root,jdbcType=CHAR}, #{nonce,jdbcType=VARCHAR},
        #{version,jdbcType=VARCHAR},  #{feereword,jdbcType=DOUBLE},
            #{blockreword,jdbcType=DOUBLE},  #{transactionVolume,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.msy.block1112.po.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        blockhash,
      </if>

      <if test="height != null">
        height,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="txSize != null">
        tx_size,
      </if>
      <if test="sizeOnDisk != null">
        size_on_disk,
      </if>
      <if test="difficulty != null">
        difficulty,
      </if>

    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blockhash != null">
        #{blockhash,jdbcType=CHAR},
      </if>

      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="txSize != null">
        #{txSize,jdbcType=INTEGER},
      </if>
      <if test="sizeOnDisk != null">
        #{sizeOnDisk,jdbcType=BIGINT},
      </if>
      <if test="difficulty != null">
        #{difficulty,jdbcType=DOUBLE},
      </if>

    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.msy.block1112.po.Block">
    update block
    <set>

      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="txSize != null">
        tx_size = #{txSize,jdbcType=INTEGER},
      </if>
      <if test="sizeOnDisk != null">
        size_on_disk = #{sizeOnDisk,jdbcType=BIGINT},
      </if>
      <if test="difficulty != null">
        difficulty = #{difficulty,jdbcType=DOUBLE},
      </if>
      <if test="prevBlockhash != null">
        prev_blockhash = #{prevBlockhash,jdbcType=CHAR},
      </if>
      <if test="nextBlockhash != null">
        next_blockhash = #{nextBlockhash,jdbcType=CHAR},
      </if>
      <if test="outputTotal != null">
        output_total = #{outputTotal,jdbcType=DOUBLE},
      </if>
      <if test="transactionFees != null">
        transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      </if>
      <if test="merkleRoot != null">
        merkle_root = #{merkleRoot,jdbcType=CHAR},
      </if>
    </set>
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.msy.block1112.po.Block">
    update block
    set 
      height = #{height,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      tx_size = #{txSize,jdbcType=INTEGER},
      size_on_disk = #{sizeOnDisk,jdbcType=BIGINT},
      difficulty = #{difficulty,jdbcType=DOUBLE},
      prev_blockhash = #{prevBlockhash,jdbcType=CHAR},
      next_blockhash = #{nextBlockhash,jdbcType=CHAR},
      output_total = #{outputTotal,jdbcType=DOUBLE},
      transaction_fees = #{transactionFees,jdbcType=DOUBLE},
      merkle_root = #{merkleRoot,jdbcType=CHAR}
    where blockhash = #{blockhash,jdbcType=CHAR}
  </update>



</mapper>